/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project on Qt Labs.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \qmlclass Button
    \ingroup qt-components
    \since 4.7f
    \brief A button component that has a label and has click event handling.

    A Button is an Item-like class.

    A button is a component that accepts user input and send a click() event for
    the application to handle. The button has resizable properties, event
    handling, and can undergo state changes and transitions.

    \section1 Example Usage

    Following is a basic button declaration. The button simply displays
    "Click Me!". The \l onClicked handler will assign "Thank You!" when there is
    a \l clicked() signal detected.
    \snippet src/snippets/MeeGo/snippet-button-simple.qml 0
*/


/*!
    \section1 Common API
    \code
    // toggled via clicked()
    property bool checked
    property bool checkable
    property bool pressed

    signal clicked

    // label visibility depends on string presence
    property string text
    // icon visibility depends on iconSource presence
    // state-dependent resources should be assigned by ternary operators comparing e.g. checked state
    property url iconSource
    \endcode
*/


/*!
    \qmlproperty bool Button::checkable
    \qmlproperty bool::checked

    If a button's \c checkable property is set to \c true, then it can have
    two alternative \c checked states, on or off. If the button is checked,
    then \c checked is true. The \c checkable and \c checked properties are set
    to \c false by default.

    \snippet src/snippets/MeeGo/snippet-button.qml 3

    \sa Button::checkableChanged, Button::checkedChanged
*/


/*!
    \qmlsignal Button::clicked()
    Signal for detecting button clicks. If the button is pressed, released, then
    this signal will be emitted.

    The signal handler, onClicked(), can bind to state changes or other actions.

    \qml

    \endqml
    This method is: protected
*/

/*!
    \qmlproperty url Button::iconSource
*/


/*!
    \qmlproperty bool Button::pressed
*/


/*!
    \qmlproperty string Button::text
    default: "Effect"

    The text will be displayed as the button's label. "Effect" is
    the default \c text.
*/




/*!
    \qmlproperty enumeration Button::TransformOrigin
    default: 4 enum
*/

/*!
    \qmlproperty AnchorLine Button::baseline
    \qmlproperty AnchorLine Button::bottom
    \qmlproperty AnchorLine Button::left
    \qmlproperty AnchorLine Button::right
    \qmlproperty AnchorLine Button::top
    \qmlproperty AnchorLine Button::horizontalCenter
    \qmlproperty AnchorLine Button::verticalCenter
*/

/*!
    \qmlproperty Anchors* Button::anchors
*/

/*!
    \qmlproperty Item* Button::parent
*/

/*!
    \qmlproperty QGraphicsEffect* Button::effect
*/

/*!
    \qmlproperty QGraphicsObject* Button::parent
*/

/*!
    \qmlproperty QObject* Button::__exclusiveGroup
*/

/*!
    \qmlproperty bool Button::activeFocus
    default: false
*/

/*!
    \qmlproperty bool Button::clip
    default: false
*/

/*!
    \qmlproperty bool Button::enabled
    The button's event system can be disabled by setting \c enabled to false.

    \snippet src/snippets/MeeGo/snippet-button.qml 4
    \sa Button::enableChanged
*/

/*!
    \qmlproperty bool Button::focus
    default: false
*/

/*!
    \qmlproperty bool Button::iconVisible
    default: true
*/

/*!
    \qmlproperty bool Button::smooth
    default: false
*/

/*!
    \qmlproperty real Button::radius
    default: 0
*/

/*!
    \qmlproperty bool Button::textVisible

    Setting \c textVisible to false, will make the \c text invisible. The
    default is true.
*/

/*!
    \qmlproperty bool Button::visible
    default: true

    Setting \c visible to false will turn the whole button invisible. The button
    will not receive any mouse events.

    \snippet src/snippets/MeeGo/snippet-button.qml 5
    \snippet src/snippets/MeeGo/snippet-button.qml 6

    \sa Button::visibleChanged
*/

/*!
    \qmlproperty enumeration Button::transformOrigin
*/

/*!
    \qmlproperty int Button::groupPosition
    default: 0
*/

/*!
    \qmlproperty list<QGraphicsObject> Button::children
*/

/*!
    \qmlproperty list<QGraphicsTransform> Button::transform
*/

/*!
    \qmlproperty list<QObject> Button::data
*/

/*!
    \qmlproperty list<QObject> Button::resources
*/

/*!
    \qmlproperty list<State> Button::states
*/

/*!
    \qmlproperty list<Transition> Button::transitions
*/

/*!
    \qmlproperty point Button::pos
*/

/*!
    \qmlproperty point Button::transformOriginPoint
*/

/*!
    \qmlproperty point Button::transformOriginPoint
*/

/*!
    \qmlproperty real Button::baselineOffset
    default: 0
*/

/*!
    \qmlproperty real Button::implicitHeight
    default: 64
*/

/*!
    \qmlproperty real Button::implicitWidth
    default: 91
*/

/*!
    \qmlproperty real Button::opacity
    The button is fully transparent if opacity is 0.0 and is opaque if
    opacity is set to 1.0. Opacity is inherited by the button's children.
    Button's opacity is set to 1.0 by default.

    \sa Button::opacityChanged()
*/

/*!
    \qmlproperty real Button::rotation

    Sets the button's rotation angle, in degrees clockwise.
    \c 0 is the default rotation angle.

    The property transformOrigin will dictate the point around which the button
    will rotate.

    \sa Button::transformOrigin, Button::rotationChanged
*/

/*!
    \qmlproperty real Button::scale
*/

/*!
    \qmlproperty real Button::width
    \qmlproperty real Button::height

    Defines the button's dimensions in pixel.
    The default width is 91 and the default height is 64.

    \sa Button::widthChanged, Button::heightChanged
*/

/*!
    \qmlproperty real Button::x
    \qmlproperty real Button::y

    Defines the button's position in pixels, relative to its parent.

    \sa Button::xChanged, Button::yChanged
*/

/*!
    \qmlproperty real Button::z

    The \c z property determines the depth of the button in a view. A component
    with a higher \c z value will be drawn in front of components with lower
    \c z values. The default value is \c 0.

*/

/*!
    \qmlproperty rect Button::childrenRect

    The children's rectangle property. This property is useful if you
    have a button that needs to be sized to fit its children.
*/

/*!
    \qmlproperty string Button::buttonType
*/

/*!
    \qmlproperty string Button::checkedIconId
*/

/*!
    \qmlproperty string Button::checkedIconSource
*/

/*!
    \qmlproperty string Button::iconId
*/

/*!
    \qmlproperty string Button::objectName
*/

/*!
    \qmlproperty string Button::state
*/

/*!
    \qmlproperty string Button::styleObjectName
*/

/*!
    \qmlmethod Button::_q_reregisterTimers( void* )
    This method is: private
*/

/*!
    \qmlmethod Button::calculateWidth()
    This method is: public
*/

/*!
    \qmlmethod Button::deleteLater()
    This method is: public
*/

/*!
    \qmlmethod Button::updateMicroFocus()
    This method is: protected
*/

/*!
    \qmlmethod QDeclarativeItem* Button::childAt( real x, real y )
    This method is: public
*/

/*!
    \qmlmethod QScriptValue Button::mapFromItem( QScriptValue item, real x, real y )
    This method is: public
*/

/*!
    \qmlmethod QScriptValue Button::mapToItem( QScriptValue item, real x, real y )
    This method is: public
*/

/*!
    \qmlmethod void Button::forceActiveFocus()
    This method is: public
*/

/*!
    \qmlsignal Button::__exclusiveGroupChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::activeFocusChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal Button::baselineOffsetChanged( real )
    This method is: protected
*/

/*!
    \qmlsignal Button::buttonTypeChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::checkableChanged()

    This method is: protected

    This signal is emitted whenever the \l checkable property is changed.
    onCheckableChanged() is called when the signal is emitted.
*/

/*!
    \qmlsignal Button::checkedChanged()
    This method is: protected
    This signal is emitted whenever the \l checked property is changed. The
    \c onCheckedChanged signal handler is called whenever the signal is emitted.
*/

/*!
    \qmlsignal Button::checkedIconIdChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::checkedIconSourceChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::childrenChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::childrenRectChanged( rect )
    This method is: protected
*/

/*!
    \qmlsignal Button::clipChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal Button::destroyed( QObject* )
    This method is: protected
*/

/*!
    \qmlsignal Button::destroyed()
    This method is: protected
*/

/*!
    \qmlsignal Button::enabledChanged()

*/

/*!
    \qmlsignal Button::focusChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal Button::groupPositionChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::iconIdChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::iconSourceChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::iconVisibleChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::implicitHeightChanged()
    This method is: protected
    \qmlsignal Button::implicitWidthChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::opacityChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::parentChanged( QDeclarativeItem* )
    This method is: protected
    \qmlsignal Button::parentChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::rotationChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::scaleChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::smoothChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal Button::stateChanged( string )
    This method is: protected
*/

/*!
    \qmlsignal Button::styleObjectNameChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::textChanged()

    A signal emitted whenever the button's text changes.
    Actions bound to signal handler onTextChanged will be executed.
    This method is: protected
*/

/*!
    \qmlsignal Button::textVisibleChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::transformOriginChanged( enumeration )
    This method is: protected
*/

/*!
    \qmlsignal Button::visibleChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::widthChanged()
    This method is: protected
    \qmlsignal Button::heightChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::xChanged()
    This method is: protected
    \qmlsignal Button::yChanged()
    This method is: protected
*/

/*!
    \qmlsignal Button::zChanged()
    This method is: protected
*/


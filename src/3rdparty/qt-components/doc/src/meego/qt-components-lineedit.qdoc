/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project on Qt Labs.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \qmlclass LineEdit
    \ingroup qt-components
    \since 4.7
    \brief The LineEdit component accepts key inputs.

    LineEdit is resizes to fit all input characters or can be fitted onto a
    fixed size. The line edit can also mask the input characters as when the
    user enters their password.

\snippet src/snippets/MeeGo/snippet-lineedit.qml 0
\snippet src/snippets/MeeGo/snippet-lineedit.qml 99
\snippet src/snippets/MeeGo/snippet-lineedit.qml 2
\snippet src/snippets/MeeGo/snippet-lineedit.qml 98
*/

/*!
    \qmlproperty enumeration LineEdit::TransformOrigin
    default: enum 4
*/

/*!
    \qmlproperty AnchorLine LineEdit::baseline
    \qmlproperty AnchorLine LineEdit::bottom
    \qmlproperty AnchorLine LineEdit::horizontalCenter
    \qmlproperty AnchorLine LineEdit::left
    \qmlproperty AnchorLine LineEdit::right
    \qmlproperty AnchorLine LineEdit::top
    \qmlproperty AnchorLine LineEdit::verticalCenter
*/

/*!
    \qmlproperty Anchors* LineEdit::anchors
*/

/*!
    \qmlproperty Item* LineEdit::parent
*/

/*!
    \qmlproperty QGraphicsEffect* LineEdit::effect
*/

/*!
    \qmlproperty QGraphicsObject* LineEdit::parent
*/

/*!
    \qmlproperty bool LineEdit::activeFocus
    default: true

    \sa LineEdit::activeFocusChanged
*/

/*!
    \qmlproperty bool LineEdit::clip
    default: false

    \sa LineEdit::clipChanged
*/

/*!
    \qmlproperty bool LineEdit::enabled
    default: true

    \sa LineEdit::enabledChanged
*/

/*!
    \qmlproperty bool LineEdit::focus
    default: focus

    \sa LineEdit::focusChanged
*/

/*!
    \qmlproperty bool LineEdit::multiLine
    default: false

    \sa LineEdit::multiLineChanged
*/

/*!
    \qmlproperty bool LineEdit::smooth
    default: false

    \sa LineEdit::smoothChanged
*/

/*!
    \qmlproperty bool LineEdit::visible
    Setting \c visible to false will turn the whole line edit invisible. The
    line edit will not receive any mouse events.

    \sa LineEdit::visibleChanged
*/

/*!
    \qmlproperty enumeration LineEdit::transformOrigin
*/

/*!
    \qmlproperty int LineEdit::documentMargin
*/

/*!
    \qmlproperty list<QGraphicsObject> LineEdit::children
*/

/*!
    \qmlproperty list<QGraphicsTransform> LineEdit::transform
*/

/*!
    \qmlproperty list<QObject> LineEdit::data
*/

/*!
    \qmlproperty list<QObject> LineEdit::resources
*/

/*!
    \qmlproperty list<State> LineEdit::states
*/

/*!
    \qmlproperty list<Transition> LineEdit::transitions
*/

/*!
    \qmlproperty point LineEdit::pos
*/

/*!
    \qmlproperty point LineEdit::transformOriginPoint
*/

/*!
    \qmlproperty point LineEdit::transformOriginPoint
*/

/*!
    \qmlproperty real LineEdit::baselineOffset
    default: 0
*/

/*!
    \qmlproperty real LineEdit::implicitHeight
    default: 20
*/

/*!
    \qmlproperty real LineEdit::implicitWidth
    default: 64
*/

/*!
    \qmlproperty real LineEdit::opacity
    default: 1

    \sa LineEdit::opacityChanged
*/

/*!
    \qmlproperty real LineEdit::rotation
    default: 0

    \sa LineEdit::rotationChanged
*/

/*!
    \qmlproperty real LineEdit::scale
    default: 1

    \sa LineEdit::scaleChanged
*/

/*!
    \qmlproperty real LineEdit::width
    \qmlproperty real LineEdit::height

    Defines the line edit's dimensions in pixel.
    The default width is 200 pixels and the default height is 50 pixels.

    \sa LineEdit::widthChanged, LineEdit::heightChanged
*/

/*!
    \qmlproperty real LineEdit::x
    \qmlproperty real LineEdit::y

    Defines the LineEdit's position in pixels, relative to its parent.
    By default, the value of \c x is 0 and \c y is 0.
    \sa LineEdit::xChanged, LineEdit::yChanged
*/

/*!
    \qmlproperty real LineEdit::z

    The \c z property determines the depth of the button in a view. A component
    with a higher \c z value will be drawn in front of components with lower
    \c z values. The default value is \c 0.

    \sa LineEdit::zChanged
*/

/*!
    \qmlproperty real LineEdit::radius
    default: 0

    \sa LineEdit::radiusChanged
*/


/*!
    \qmlproperty rect LineEdit::childrenRect
*/

/*!
    \qmlproperty string LineEdit::objectName
*/

/*!
    \qmlproperty string LineEdit::promptText
*/

/*!
    \qmlproperty string LineEdit::state
*/

/*!
    \qmlproperty string LineEdit::styleType
*/

/*!
    \qmlproperty string LineEdit::text

    The string value of the line edit.

    \sa LineEdit::textChanged
*/

/*!
    \qmlproperty variant LineEdit::activeFocusOnPress

    \sa LineEdit::activeFocusOnPressChanged
*/

/*!
    \qmlproperty variant LineEdit::color

    \sa LineEdit::colorChanged
*/

/*!
    \qmlproperty variant LineEdit::echoMode
    Sets the display format of the inputted characters. For password prompts,
    the password should be masked.

    Specifies how the \c text should be displayed in the LineEdit.
    \list
    \o TextInput.Normal - Displays the text as it is. (Default)
    \o TextInput.Password - Displays asterixes instead of characters.
    \o TextInput.NoEcho - Displays nothing.
    \o TextInput.PasswordEchoOnEdit - Displays all but the current character
        as asterixes.
    \endlist

\snippet src/snippets/MeeGo/snippet-lineedit.qml 0
\snippet src/snippets/MeeGo/snippet-lineedit.qml 99
\snippet src/snippets/MeeGo/snippet-lineedit.qml 1
\snippet src/snippets/MeeGo/snippet-lineedit.qml 98

    \sa TextInput::echoModeChanged, LineEdit::passwordCharacter
*/

/*!
    \qmlproperty variant LineEdit::font
*/

/*!
    \qmlproperty variant LineEdit::horizontalAlignment
*/

/*!
    \qmlproperty variant LineEdit::inputElement
*/

/*!
    \qmlproperty string LineEdit::passwordCharacter

    Set the character used when masking the input. Asterisk, \c *, is the
    default character.

    \sa LineEdit::echoMode
*/

/*!
    \qmlproperty color LineEdit::selectedTextColor
    Set the color of selected text.

    \sa LineEdit::selectedTextColorChanged, LineEdit::selectionColor
*/

/*!
    \qmlproperty color LineEdit::selectionColor
    Set the color of the selection area.

    \sa LineEdit::selectionColorChanged, LineEdit::selectedTextColor
*/

/*!
    \qmlproperty variant LineEdit::wrapMode
*/

/*!
    \qmlmethod LineEdit::_q_reregisterTimers( void* )
    This method is: private
*/

/*!
    \qmlmethod LineEdit::deleteLater()
    This method is: public
*/

/*!
    \qmlmethod LineEdit::updateMicroFocus()
    This method is: protected
*/

/*!
    \qmlmethod QDeclarativeItem* LineEdit::childAt( real x, real y )
    This method is: public
*/

/*!
    \qmlmethod QScriptValue LineEdit::mapFromItem( QScriptValue item, real x, real y )
    This method is: public
*/

/*!
    \qmlmethod QScriptValue LineEdit::mapToItem( QScriptValue item, real x, real y )
    This method is: public
*/

/*!
    \qmlmethod void LineEdit::forceActiveFocus()
    This method is: public
*/

/*!
    \qmlsignal LineEdit::activeFocusChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::activeFocusOnPressChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::baselineOffsetChanged( real )
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::childrenChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::childrenRectChanged( rect )
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::clipChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::colorChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::destroyed( QObject* )
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::destroyed()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::documentMarginChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::echoModeChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::enabledChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::focusChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::fontChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::heightChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::horizontalAlignmentChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::implicitHeightChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::implicitWidthChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::inputElementChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::multiLineChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::opacityChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::parentChanged( QDeclarativeItem* )
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::parentChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::passwordCharacterChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::promptTextChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::rotationChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::scaleChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::selectedTextColorChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::selectionColorChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::smoothChanged( bool )
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::stateChanged( string )
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::styleTypeChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::textChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::transformOriginChanged( enumeration )
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::visibleChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::widthChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::wrapModeChanged()
    This method is: protected
*/

/*!
    \qmlsignal LineEdit::xChanged()
    \qmlsignal LineEdit::yChanged()

    Whenever the \c x and \y properties change, these signals are emitted.
    The actions bound to signal handlers \c onXChanged and \c onYChanged are
    executed.

    \sa LineEdit::x, LineEdit::y
*/

/*!
    \qmlsignal LineEdit::zChanged()
    This method is: protected
*/

